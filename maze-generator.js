"use strict";var _a;class CellPos{constructor(row,col){this.row=0;this.col=0;this.row=row;this.col=col}}class MazeCell{constructor(){this.checked=false;this.paths=[];this.length=0}}function genMaze(boardWidth,boardHeight){let maze=Array.apply(null,Array(boardHeight)).map(()=>{return Array.apply(null,Array(boardWidth)).map(()=>{return new MazeCell})});const genPath=(row,col,pathLen)=>{maze[row][col].checked=true;let possibleDir=[];if(row-1>=0&&!maze[row-1][col].checked){possibleDir.push(new CellPos(row-1,col))}if(row+1<boardHeight&&!maze[row+1][col].checked){possibleDir.push(new CellPos(row+1,col))}if(col-1>=0&&!maze[row][col-1].checked){possibleDir.push(new CellPos(row,col-1))}if(col+1<boardWidth&&!maze[row][col+1].checked){possibleDir.push(new CellPos(row,col+1))}if(possibleDir.length===0){maze[row][col].length=pathLen;return}const direction=Math.floor(Math.random()*possibleDir.length);maze[row][col].paths.push(new CellPos(possibleDir[direction].row,possibleDir[direction].col));genPath(possibleDir[direction].row,possibleDir[direction].col,pathLen+1);if(possibleDir.length>1){genPath(row,col,pathLen)}};genPath(0,0,0);return maze}function drawMaze(ctx,maze,cellSize,offset,endPos){if(maze.length===0){return}else{if(maze[0].length===0){return}}const drawWalls=(row,col,prev)=>{let openPaths=new Map;openPaths.set(`${row-1}${col}`,false);openPaths.set(`${row+1}${col}`,false);openPaths.set(`${row}${col-1}`,false);openPaths.set(`${row}${col+1}`,false);for(const path of maze[row][col].paths){openPaths.set(`${path.row}${path.col}`,true);drawWalls(path.row,path.col,new CellPos(row,col))}if(prev!==null){openPaths.set(`${prev.row}${prev.col}`,true)}const cellOffset=[col*cellSize+offset,row*cellSize+offset];if(!openPaths.get(`${row-1}${col}`)){ctx.moveTo(cellOffset[0],cellOffset[1]);ctx.lineTo(cellOffset[0]+cellSize,cellOffset[1])}if(!openPaths.get(`${row}${col+1}`)){ctx.moveTo(cellOffset[0]+cellSize,cellOffset[1]);ctx.lineTo(cellOffset[0]+cellSize,cellOffset[1]+cellSize)}if(!openPaths.get(`${row+1}${col}`)){ctx.moveTo(cellOffset[0],cellOffset[1]+cellSize);ctx.lineTo(cellOffset[0]+cellSize,cellOffset[1]+cellSize)}if(!openPaths.get(`${row}${col-1}`)){ctx.moveTo(cellOffset[0],cellOffset[1]);ctx.lineTo(cellOffset[0],cellOffset[1]+cellSize)}ctx.stroke()};ctx.beginPath();ctx.lineWidth=4;ctx.strokeStyle="black";ctx.lineCap="round";drawWalls(0,0,null);ctx.closePath();const cellSizeHalf=Math.floor(cellSize/2);const cellSizeQuarter=Math.floor(cellSize*.25);ctx.beginPath();ctx.strokeStyle="green";ctx.arc(offset+cellSizeHalf,offset+cellSizeHalf,cellSizeQuarter,0,Math.PI*2);ctx.stroke();ctx.closePath();const endCenter=[endPos.col*cellSize+offset+cellSizeHalf,endPos.row*cellSize+offset+cellSizeHalf];ctx.beginPath();ctx.strokeStyle="red";ctx.moveTo(endCenter[0]-cellSizeQuarter,endCenter[1]-cellSizeQuarter);ctx.lineTo(endCenter[0]+cellSizeQuarter,endCenter[1]+cellSizeQuarter);ctx.moveTo(endCenter[0]+cellSizeQuarter,endCenter[1]-cellSizeQuarter);ctx.lineTo(endCenter[0]-cellSizeQuarter,endCenter[1]+cellSizeQuarter);ctx.stroke();ctx.closePath()}const canvas=document.querySelector("#maze");const options=document.querySelector("#options-wrapper form");const widthInput=options.querySelector('input[name="width"]');const heightInput=options.querySelector('input[name="height"]');function newMaze(mazeWidth,mazeHeight){const cellSize=51;if(canvas!==null){canvas.width=mazeWidth*cellSize+20;canvas.height=mazeHeight*cellSize+20}else{return}const ctx=canvas.getContext("2d");if(ctx!==null){const maze=genMaze(mazeWidth,mazeHeight);let pathLen=0;let lastNode=new CellPos(0,0);for(let row=0;row<maze.length;row++){for(let col=0;col<maze[row].length;col++){if(maze[row][col].length>pathLen){pathLen=maze[row][col].length;lastNode.row=row;lastNode.col=col}}}ctx.fillStyle="white";ctx.fillRect(0,0,mazeWidth*cellSize+20,mazeHeight*cellSize+20);drawMaze(ctx,maze,cellSize,10,lastNode)}}options===null||options===void 0?void 0:options.addEventListener("submit",e=>{e.preventDefault();newMaze(parseInt(widthInput.value,10),parseInt(heightInput.value,10))});newMaze(10,10);(_a=document.querySelector("#download"))===null||_a===void 0?void 0:_a.addEventListener("click",()=>{let link=document.createElement("a");link.setAttribute("href",canvas.toDataURL("image/png").replace("image/png","image/octet-stream"));link.setAttribute("download","labirint.png");link.style.display="none";document.body.appendChild(link);link.click();document.body.removeChild(link)});